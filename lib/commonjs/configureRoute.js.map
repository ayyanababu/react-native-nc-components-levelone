{"version":3,"sources":["configureRoute.tsx"],"names":["Stack","Tab","getRouteConfig","props","screens_config","type","innerNavigation","getRoutes","map","screen","eachScreen","index","title","component"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;;;AAEA,MAAMA,KAAK,GAAG,8CAAd;AACA,MAAMC,GAAG,GAAG,2CAAZ;;AAEA,MAAMC,cAAc,GAAIC,KAAD,IAAgB;AACrC,QAAM;AAAEC,IAAAA,cAAF;AAAkBC,IAAAA,IAAlB;AAAwBC,IAAAA;AAAxB,MAA4CH,KAAlD;;AACA,QAAMI,SAAS,GAAG,MAAM;AACtB,QAAIF,IAAI,KAAK,OAAb,EAAsB;AACpB,0BACE,6BAAC,KAAD,CAAO,SAAP,QACGD,cAAc,CAACI,GAAf,CAAoBC,MAAD,IAAiB;AACnC,cAAM;AAAEC,UAAAA,UAAF;AAAcC,UAAAA;AAAd,YAAwBF,MAA9B;AACA,4BACE,6BAAC,KAAD,CAAO,MAAP;AACE,UAAA,IAAI,EAAEC,UAAU,CAACE,KADnB;AAEE,UAAA,SAAS,EAAEF,UAAU,CAACG,SAFxB;AAGE,UAAA,GAAG,EAAEF;AAHP,UADF;AAOD,OATA,CADH,CADF;AAcD,KAfD,MAeO;AACL,0BACE,6BAAC,GAAD,CAAK,SAAL,QACGP,cAAc,CAACI,GAAf,CAAoBC,MAAD,IAAiB;AACnC,cAAM;AAAEC,UAAAA;AAAF,YAAiBD,MAAvB;AACA,4BACE,6BAAC,GAAD,CAAK,MAAL;AACE,UAAA,IAAI,EAAEC,UAAU,CAACE,KADnB;AAEE,UAAA,SAAS,EAAEF,UAAU,CAACG;AAFxB,UADF;AAMD,OARA,CADH,CADF;AAaD;AACF,GA/BD;;AAiCA,SAAOP,eAAe,GACpBC,SAAS,EADW,gBAGpB,6BAAC,2BAAD,QAAsBA,SAAS,EAA/B,CAHF;AAKD,CAxCD;;eA0CeL,c","sourcesContent":["import React from 'react';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { NavigationContainer } from '@react-navigation/native';\n\nconst Stack = createNativeStackNavigator();\nconst Tab = createBottomTabNavigator();\n\nconst getRouteConfig = (props: any) => {\n  const { screens_config, type, innerNavigation } = props;\n  const getRoutes = () => {\n    if (type === 'stack') {\n      return (\n        <Stack.Navigator>\n          {screens_config.map((screen: any) => {\n            const { eachScreen, index } = screen;\n            return (\n              <Stack.Screen\n                name={eachScreen.title}\n                component={eachScreen.component}\n                key={index}\n              />\n            );\n          })}\n        </Stack.Navigator>\n      );\n    } else {\n      return (\n        <Tab.Navigator>\n          {screens_config.map((screen: any) => {\n            const { eachScreen } = screen;\n            return (\n              <Tab.Screen\n                name={eachScreen.title}\n                component={eachScreen.component}\n              />\n            );\n          })}\n        </Tab.Navigator>\n      );\n    }\n  };\n\n  return innerNavigation ? (\n    getRoutes()\n  ) : (\n    <NavigationContainer>{getRoutes()}</NavigationContainer>\n  );\n};\n\nexport default getRouteConfig;\n"]}