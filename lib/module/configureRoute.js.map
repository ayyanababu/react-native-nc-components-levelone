{"version":3,"sources":["configureRoute.tsx"],"names":["React","createNativeStackNavigator","createBottomTabNavigator","NavigationContainer","Stack","Tab","getRouteConfig","props","screens_config","type","innerNavigation","getRoutes","map","screen","index","title","component"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,0BAAT,QAA2C,gCAA3C;AACA,SAASC,wBAAT,QAAyC,+BAAzC;AACA,SAASC,mBAAT,QAAoC,0BAApC;AAEA,MAAMC,KAAK,GAAGH,0BAA0B,EAAxC;AACA,MAAMI,GAAG,GAAGH,wBAAwB,EAApC;;AAEA,MAAMI,cAAc,GAAIC,KAAD,IAAgB;AACrC,QAAM;AAAEC,IAAAA,cAAF;AAAkBC,IAAAA,IAAlB;AAAwBC,IAAAA;AAAxB,MAA4CH,KAAlD;;AACA,QAAMI,SAAS,GAAG,MAAM;AACtB,QAAIF,IAAI,KAAK,OAAb,EAAsB;AACpB,0BACE,oBAAC,KAAD,CAAO,SAAP,QACGD,cAAc,CAACI,GAAf,CAAmB,CAACC,MAAD,EAAcC,KAAd,KAAgC;AAClD,cAAM;AAAEC,UAAAA,KAAF;AAASC,UAAAA;AAAT,YAAuBH,MAA7B;AACA,4BACE,oBAAC,KAAD,CAAO,MAAP;AAAc,UAAA,IAAI,EAAEE,KAApB;AAA2B,UAAA,SAAS,EAAEC,SAAtC;AAAiD,UAAA,GAAG,EAAEF;AAAtD,UADF;AAGD,OALA,CADH,CADF;AAUD,KAXD,MAWO;AACL,0BACE,oBAAC,GAAD,CAAK,SAAL,QACGN,cAAc,CAACI,GAAf,CAAoBC,MAAD,IAAiB;AACnC,cAAM;AAAEE,UAAAA,KAAF;AAASC,UAAAA;AAAT,YAAuBH,MAA7B;AACA,4BAAO,oBAAC,GAAD,CAAK,MAAL;AAAY,UAAA,IAAI,EAAEE,KAAlB;AAAyB,UAAA,SAAS,EAAEC;AAApC,UAAP;AACD,OAHA,CADH,CADF;AAQD;AACF,GAtBD;;AAwBA,SAAON,eAAe,GACpBC,SAAS,EADW,gBAGpB,oBAAC,mBAAD,QAAsBA,SAAS,EAA/B,CAHF;AAKD,CA/BD;;AAiCA,eAAeL,cAAf","sourcesContent":["import React from 'react';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { NavigationContainer } from '@react-navigation/native';\n\nconst Stack = createNativeStackNavigator();\nconst Tab = createBottomTabNavigator();\n\nconst getRouteConfig = (props: any) => {\n  const { screens_config, type, innerNavigation } = props;\n  const getRoutes = () => {\n    if (type === 'stack') {\n      return (\n        <Stack.Navigator>\n          {screens_config.map((screen: any, index: number) => {\n            const { title, component } = screen;\n            return (\n              <Stack.Screen name={title} component={component} key={index} />\n            );\n          })}\n        </Stack.Navigator>\n      );\n    } else {\n      return (\n        <Tab.Navigator>\n          {screens_config.map((screen: any) => {\n            const { title, component } = screen;\n            return <Tab.Screen name={title} component={component} />;\n          })}\n        </Tab.Navigator>\n      );\n    }\n  };\n\n  return innerNavigation ? (\n    getRoutes()\n  ) : (\n    <NavigationContainer>{getRoutes()}</NavigationContainer>\n  );\n};\n\nexport default getRouteConfig;\n"]}